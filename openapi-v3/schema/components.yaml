---
# This file contains reusable openapi-v3 entities for defining
#   interoperable API behavior by adopting developers.
#
# You can reference components via JSON-refs https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03
#  eg. $ref: 'https://gigantic-server.com/schemas/Monster/schema.json'
#
openapi: 3.0.0
components:
  parameters:
    # Generic parameters for pagination defined in
    cursor:
      name: cursor
      in: query
      description: An opaque identifier that points to the next item in the collection.
      example: 01BX9NSMKVXXS5PSP2FATZM123
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: Fields to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      schema:
        type: integer
        format: int32
    offset:
      name: offset
      in: query
      description: The zero-ary offset index into the results
      schema:
        type: integer
        default: 0
        format: int32
    q:
      name: q
      in: query
      description: Search query term
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: Sorting order
      schema:
        type: string
        example: +name
    Etag:
      name: Etag
      description: |
        The RFC7232 ETag header field in a response provides the current entity-
        tag for the selected resource. An entity-tag is an opaque identifier for
        different versions of a resource over time, regardless whether multiple
        versions are valid at the same time. An entity-tag consists of an opaque
        quoted string, possibly prefixed by a weakness indicator.
      in: header
      example: W/"xy", "5", "7da7a728-f910-11e6-942a-68f728c1ba70"
      required: false
      schema:
        type: string
    IfMatch:
      name: If-Match
      description: |
        The RFC7232 If-Match header field in a request requires the server to
        only operate on the resource that matches at least one of the provided
        entity-tags. This allows clients express a precondition that prevent
        the method from being applied if there have been any changes to the
        resource.
      in: header
      required: false
      example: '"5", "7da7a728-f910-11e6-942a-68f728c1ba70"'
      schema:
        type: string
    IfNoneMatch:
      name: If-None-Match
      description: |
        The RFC7232 If-None-Match header field in a request requires the server
        to only operate on the resource if it does not match any of the provided
        entity-tags. If the provided entity-tag is `*`, it is required that the
        resource does not exist at all.
      in: header
      required: false
      example: '"7da7a728-f910-11e6-942a-68f728c1ba70", *'
      schema:
        type: string
  headers:
    # Headers conform to http://zalando.github.io/restful-api-guidelines/index.html#132
    X-RateLimit-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
        format: int32
    X-RateLimit-Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
        format: int32
    X-RateLimit-Reset:
      description: The number of seconds left in the current period
      schema:
        type: integer
        format: int32
    Retry-After:
        description: |-
          Retry contacting the endpoint *at least* after seconds.
          See https://tools.ietf.org/html/rfc7231#section-7.1.3
        schema:
          type: integer
          format: int32
  responses:
    # Predefined error codes for this API
    400BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    404NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    429TooManyRequests:
      description: Too many requests
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/X-RateLimit-Reset'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    503ServiceUnavailable:
      description: Service Unavailable
      headers:
        Retry-After:
          '$ref': '#/components/headers/Retry-After'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    default:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
  schemas:
    SampleEntry:
      type: object
      description: |-
        This entry shows a set of common fields to be used
        with their proper format and description.
      properties:
        id:
          type: string
          format: uuid
          description: |-
            The unique and opaque identifier for the entry, which:
              * is unique in its context;
              * will not be reused in time;
              * is not a number.
        created:
          type: date-time
          description: The object creation time.
        modified:
          type: date-time
          description: The object modification time.
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://tools.ietf.org/html/rfc7231#section-6.6.4'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
